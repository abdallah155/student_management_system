# -*- coding: utf-8 -*-
"""student_managment_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FDWdnfkCp0XRMs8VBrjIQw4Ol8c8BE3u
"""

from os import path
from pathlib import Path
import logging
logger = logging.getLogger('my_logger')
logging.basicConfig(filename='/content/.config/logs/logs1/test_error', level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

def name()->str:
  while True:# name
    try:
      name = str(input('Enter student name: '))
      if name.isalpha()== 0:
        raise ValueError("Wrong value, Enter a sequence of characters !!")
      break
    except ValueError as e:
      print(e)
  return name

def age()->int:
  while True:# age
    try:
      age = int(input('Enter age: '))
      if age < 18 or age > 30:
        raise ValueError("Wrong value, Enter a valid age from 18 to 30!!")
      break
    except ValueError as e:
      print(e)
  return age

def grade()->int:
  while True:# grade
    try:
      grade = float(input('Enter grade from 0-4: '))
      if grade < 0 or grade > 4:
        raise ValueError("Wrong value, Enter a valid grade !!")
      break
    except ValueError as e:
      print(e)
  return grade

def info()->str:
  while True:# info
    try:
      contact_info = str(input('Enter student telephone/mobile number: '))
      if not contact_info.isdigit():
        raise TypeError("Wrong type, Enter a sequence of digits !!")
      if len(contact_info) < 10 or len(contact_info) > 12:
        raise ValueError("Wrong Value, Enter a correct length from 10 to 12 digits1")
      break
    except TypeError as TE:
      print(TE)
    except ValueError as VE:
      print(VE)
  return contact_info

def option1(self):
    name1 = name()
    age1 = age()
    grade1 = grade()
    contact_info1 = info()
    stud = Student(name1,age1,grade1,contact_info1)
    self.list_of_studnets.append(stud)

def option2(self):
  assert bool(self.list_of_studnets), "list  of students are empty"
  for student in self.list_of_studnets:
    student.display()

def option3(self,n):
   assert bool(self.list_of_studnets), "list  of students are empty"
   print(f'number of students = {n}')
   num = int(input(f'which student to update enter student number within range from 1 to {n}: '))
   for x in range(n):
      if num == x+1:
        self.list_of_studnets[x].update_student()

class Student:
  def __init__(self,name, age, grade,contact_info):
    self.name = name
    self.age = age
    self.grade = grade
    self.contact_info = contact_info
  def update_student(self):
    print('if you want to update student name enter a new name: ')
    self.name = name()
    print('if you want to update student age enter a new number: ')
    self.age = age()
    print('if you want to update student grade enter a new gpa from 0 to 4: ')
    self.grade = grade()
    print('if you want to update student contact_info enter a new mobile number/telephone: ')
    self.contact_info = info()
  def display(self):
    print(f'student name is: {self.name}')
    print(f'student age is: {self.age}')
    print(f'student grade is: {self.grade}')
    print(f'student contact information is: {self.contact_info}')
    print('-------------------------------------------------------------------------------')

class CLI():

 def __init__(self):
  self.list_of_studnets = []


 def interface(self):
    num_of_students = 0
    while True:

      print('options:')
      print('1-Add new student: ')
      print('2-display student details: ')
      print('3-update student details: ')
      print('4-Exit')
      try:
        options = int(input('enter number between 1 and 4: '))
        if options < 1 or options > 4:
          raise ValueError("Wrong value, Try again !!")
        else:
          print("successful")
          num_of_students = len(self.list_of_studnets)
          if options == 1:
            option1(self)
          elif options == 2:
            option2(self)
          elif options == 3:
            option3(self,num_of_students)
          else:
            break
      except ValueError as e:
        print(e)

if __name__ =='__main__':
  try:
    command = CLI()
    command.interface()
  except Exception as e:
    logging.error("An error occurred: %s", str(e))
    logging.warning('This will get logged to a file')
    print(Path('/content/.config/logs/logs1/test_error').read_text())

